#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.17.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

# import sys
# import pprint
# if sys.version_info[0] > 2:
#     from urllib.parse import urlparse
# else:
#     from urlparse import urlparse
# from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
# from thrift.protocol.TBinaryProtocol import TBinaryProtocol

# from save import save
# from save.ttypes import *

# if len(sys.argv) <= 1 or sys.argv[1] == '--help':
#     print('')
#     print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
#     print('')
#     print('Functions:')
#     print('  i32 save_data(string username, string passwd, i32 player1_id, i32 player2_id)')
#     print('')
#     sys.exit(0)

# pp = pprint.PrettyPrinter(indent=2)
# host = 'localhost'
# port = 9090
# uri = ''
# framed = False
# ssl = False
# validate = True
# ca_certs = None
# keyfile = None
# certfile = None
# http = False
# argi = 1

# if sys.argv[argi] == '-h':
#     parts = sys.argv[argi + 1].split(':')
#     host = parts[0]
#     if len(parts) > 1:
#         port = int(parts[1])
#     argi += 2

# if sys.argv[argi] == '-u':
#     url = urlparse(sys.argv[argi + 1])
#     parts = url[1].split(':')
#     host = parts[0]
#     if len(parts) > 1:
#         port = int(parts[1])
#     else:
#         port = 80
#     uri = url[2]
#     if url[4]:
#         uri += '?%s' % url[4]
#     http = True
#     argi += 2

# if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
#     framed = True
#     argi += 1

# if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
#     ssl = True
#     argi += 1

# if sys.argv[argi] == '-novalidate':
#     validate = False
#     argi += 1

# if sys.argv[argi] == '-ca_certs':
#     ca_certs = sys.argv[argi+1]
#     argi += 2

# if sys.argv[argi] == '-keyfile':
#     keyfile = sys.argv[argi+1]
#     argi += 2

# if sys.argv[argi] == '-certfile':
#     certfile = sys.argv[argi+1]
#     argi += 2

# cmd = sys.argv[argi]
# args = sys.argv[argi + 1:]

# if http:
#     transport = THttpClient.THttpClient(host, port, uri)
# else:
#     if ssl:
#         socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
#     else:
#         socket = TSocket.TSocket(host, port)
#     if framed:
#         transport = TTransport.TFramedTransport(socket)
#     else:
#         transport = TTransport.TBufferedTransport(socket)
# protocol = TBinaryProtocol(transport)
# client = save.Client(protocol)
# transport.open()

# if cmd == 'save_data':
#     if len(args) != 4:
#         print('save_data requires 4 args')
#         sys.exit(1)
#     pp.pprint(client.save_data(args[0], args[1], eval(args[2]), eval(args[3]),))

# else:
#     print('Unrecognized method %s' % cmd)
#     sys.exit(1)

# transport.close()

import glob
import sys
sys.path.append('./save_server/')

from save import save


from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer


class CalculatorHandler():
    def save_data(self, a, b, c, d):
        with open('a.txt', 'a', encoding='utf8') as f:
            ans = f'{c} {d}\n'
            f.write(ans)
        return 1

if __name__ == '__main__':
    handler = CalculatorHandler()
    processor = save.Processor(handler)
    transport = TSocket.TServerSocket(host='127.0.0.1', port=9999)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)

    # You could do one of these for a multithreaded server
    # server = TServer.TThreadedServer(
    #     processor, transport, tfactory, pfactory)
    # server = TServer.TThreadPoolServer(
    #     processor, transport, tfactory, pfactory)

    print('Starting the server...')
    server.serve()
    print('done.')
